from openai import OpenAI
from .google_vision import google_vision_extract
from .utils import list_visible_information
from .decorators import vote, has_valid_data  
import json

# Load the API key from the JSON configuration file
with open("config.json", "r") as config_file:
    config = json.load(config_file)

api_key = config["openai_api_key"]

# Configure the OpenAI API
client = OpenAI(api_key=api_key)

import json
from openai import OpenAI

def gpt_extract_information(extracted_text, document_type):
    """Uses GPT to extract structured information from the given text."""
    
    prompts = {
        "Certid√£o de Casamento": f"""
        Extraia as seguintes informa√ß√µes de uma Certid√£o de Casamento com base no texto abaixo:
        - Nome dos noivos
        - Data do casamento
        - Regime de bens
        - Nome alterado (se algum dos noivos mudou de nome ap√≥s o casamento)
        - Estado civil antes do casamento (solteiro, divorciado, etc.)

        Texto da certid√£o:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome dos Noivos": ["Noivo", "Noiva"],
            "Data do Casamento": "",
            "Regime de Bens": "",
            "Nome Alterado": ["Nome anterior -> Nome atual"],
            "Estado Civil Antes do Casamento": ["Estado civil do Noivo", "Estado civil da Noiva"]
        }}
        """,

        "Certid√£o de Nascimento": f"""
        Extraia as seguintes informa√ß√µes de uma Certid√£o de Nascimento com base no texto abaixo:
        - Nome do titular do documento
        - Data de nascimento
        - Naturalidade
        - Filia√ß√£o (nome do pai e da m√£e, se dispon√≠veis)

        Texto da certid√£o:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "Data de Nascimento": "",
            "Naturalidade": "",
            "Filia√ß√£o": ["Nome do Pai", "Nome da M√£e"]
        }}
        """,

        "CNH": f"""
        Extraia as seguintes informa√ß√µes de uma CNH (Carteira Nacional de Habilita√ß√£o) com base no texto abaixo:
        - Nome completo
        - RG
        - CPF
        - Filia√ß√£o (pai e m√£e)
        - Data de validade da CNH
        - Local de emiss√£o

        Texto da CNH:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "RG": "",
            "CPF": "",
            "Filia√ß√£o": ["Nome do Pai", "Nome da M√£e"],
            "Validade": "",
            "Local de Emiss√£o": ""
        }}
        """,

        "RG": f"""
        Extraia as seguintes informa√ß√µes de um RG (Registro Geral) com base no texto abaixo:
        - Nome completo
        - RG
        - CPF (se dispon√≠vel)
        - Data de nascimento
        - Naturalidade
        - Filia√ß√£o (pai e m√£e)

        Texto do RG:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "RG": "",
            "CPF": "",
            "Data de Nascimento": "",
            "Naturalidade": "",
            "Filia√ß√£o": ["Nome do Pai", "Nome da M√£e"]
        }}
        """,

        "CPF": f"""
        Extraia as seguintes informa√ß√µes de um CPF com base no texto abaixo:
        - Nome completo
        - CPF
        - Data de nascimento

        Texto do CPF:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "CPF": "",
            "Data de Nascimento": ""
        }}
        """,

        "Comprovante de Endere√ßo": f"""
        Extraia as seguintes informa√ß√µes de um comprovante de endere√ßo com base no texto abaixo:
        - Nome do titular do comprovante
        - Endere√ßo completo (incluindo rua, n√∫mero, bairro, cidade, estado e CEP)

        Texto do comprovante de endere√ßo:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome Completo": "",
            "Endere√ßo Completo": ""
        }}
        """,

        "CTPS": f"""
        Extraia as seguintes informa√ß√µes de uma CTPS (Carteira de Trabalho e Previd√™ncia Social) com base no texto abaixo:
        - Nome completo do titular
        - Ocupa√ß√£o atual (cargo ou fun√ß√£o descrito no documento)
        - Remunera√ß√µes (valores salariais mencionados, incluindo per√≠odos de pagamento)

        Texto da CTPS:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "Ocupa√ß√£o": "",
            "Remunera√ß√µes": [
                {{
                    "Per√≠odo": "",
                    "Valor": ""
                }}
            ]
        }}
        """,

        "Holerite": f"""
        Extraia as seguintes informa√ß√µes de um holerite com base no texto abaixo:
        - Nome do funcion√°rio
        - Sal√°rio base
        - Descontos
        - Valor l√≠quido

        Texto do holerite:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "Sal√°rio Base": "",
            "Descontos": "",
            "Valor L√≠quido": ""
        }}
        """,

        "Imposto de Renda": f"""
        Extraia as seguintes informa√ß√µes de um documento de Imposto de Renda com base no texto abaixo:
        - Nome do declarante
        - CPF do declarante
        - Natureza do rendimento
        - Valor dos rendimentos

        Texto do documento:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "CPF": "",
            "Natureza do Rendimento": "",
            "Valor dos Rendimentos": ""
        }}
        """,

        "Driver's License": f"""
        Extraia as seguintes informa√ß√µes de um documento de Driver's License com base no texto abaixo:
        - Nome
        - N√∫mero da CNH
        - Data de Nascimento
        - Endere√ßo
        - Classe
        - Data de Expira√ß√£o
        - Data de Emiss√£o
        - Altura
        - Sexo
        - Cor dos Olhos

        Texto do documento:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "N√∫mero da CNH": "",
            "Data de Nascimento": "",
            "Endere√ßo": "",
            "Classe": "",
            "Data de Expira√ß√£o": "",
            "Data de Emiss√£o": "",
            "Altura": "",
            "Sexo": "",
            "Cor dos Olhos": ""
        }}
        """,

        "FGTS": f"""
        Extraia as seguintes informa√ß√µes de um extrato do FGTS com base no texto abaixo:
        - Nome do trabalhador
        - Nome das empresas onde o trabalhador teve v√≠nculo
        - Valores depositados por cada empresa

        Texto do extrato do FGTS:
        {extracted_text}

        Responda em JSON com o formato:
        {{
            "Nome": "",
            "Empresas": [
                {{
                    "Empresa": "",
                    "Valor Depositado": ""
                }}
            ]
        }}
        """
    }

    prompt = prompts.get(document_type, f"""
    Extraia as seguintes informa√ß√µes de um documento do tipo {document_type} com base no texto abaixo:
    - Nome
    - CPF
    - RG
    - Data de Nascimento
    - Data de Expedi√ß√£o
    - Naturalidade
    - Filia√ß√£o (pai e m√£e)

    Texto do documento:
    {extracted_text}

    Responda em JSON com o formato:
    {{
        "Nome": "",
        "CPF": "",
        "RG": "",
        "Data de Nascimento": "",
        "Data de Expedi√ß√£o": "",
        "Naturalidade": "",
        "Filia√ß√£o": ["Nome do Pai", "Nome da M√£e"]
    }}
    """)

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are an AI assistant that organizes document information."},
            {"role": "user", "content": prompt}
        ]
    )

    return json.loads(response.choices[0].message.content)


def extract_text(image_path):
    """Extracts visible text from an image using Google Vision."""
    extracted_text = google_vision_extract(image_path)
    print(f"üîç Extracted text: {extracted_text}")  # DEBUG: Verifique se algo est√° sendo extra√≠do
    return "\n".join(list_visible_information(extracted_text))


def process_document(image_path, document_type):
    """
    Processes a document image to extract structured information.
    """
    try:
        # Extract visible text
        extracted_text = extract_text(image_path)
        print(f"üìù DEBUG: Texto extra√≠do: {extracted_text}")

        # Apply voting mechanism if needed
        if not extracted_text.strip():
            print("‚ö†Ô∏è DEBUG: Texto extra√≠do est√° vazio. Aplicando mecanismo de vota√ß√£o.")
            extracted_text = vote(5)(extract_text)(image_path)

        # Process the extracted text with GPT
        organized_data = gpt_extract_information(extracted_text, document_type)

        # Prepare final JSON
        final_result = {
            "Tipo de Documento": document_type,
            "Texto Vis√≠vel": extracted_text,
            "Informa√ß√µes Organizadas": organized_data
        }

        print(f"‚úÖ DEBUG: JSON final retornado:\n{json.dumps(final_result, indent=4, ensure_ascii=False)}")
        return final_result

    except Exception as e:
        print(f"‚ùå DEBUG: Erro no process_document: {e}")
        return
